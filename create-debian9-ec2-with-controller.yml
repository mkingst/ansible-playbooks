- hosts: localhost
  gather_facts: no
  vars_files:
    - keys.yml
  vars:
    DEFAULT_VPC_SUBNET: subnet-3ecb9f5a
    BASE_AMI: ami-0a419c6416bb69b9c #debian9Stretch
    AWS_ZONE: eu-west-1b
    SECURITY_GROUP: sg-00cacfc118d60aec3
  tasks:

    - name: Create AWS key pair using Ansibles key
      ec2_key:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        security_token: "{{ AWS_SESSION_TOKEN }}"
        ec2_region: "{{ AWS_REGION }}"
        name: ansible_keypair
        key_material: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"

    - name: Provision instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        security_token: "{{ AWS_SESSION_TOKEN }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        instance_type: t2.xlarge
        group_id: "{{ SECURITY_GROUP }}"
        keypair: ansible_keypair
        image: "{{ BASE_AMI }}"
        assign_public_ip: yes
        volumes:
        - device_name: xvda
          volume_type: gp2
          volume_size: "100"
          delete_on_termination: true
        vpc_subnet_id: "{{ DEFAULT_VPC_SUBNET }}"
        wait: true
        count: 1
        instance_tags:
          Owner: m.kingston@f5.com
          Name: controller-debian9
      register: ec2

    - name: allocate a new elastic IP and associate it with the instance
      ec2_eip:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        security_token: "{{ AWS_SESSION_TOKEN }}"
        ec2_region: "{{ AWS_REGION }}"
        device_id: "{{ ec2.instance_ids[0] }}"
      register: eip

    - name: output the IP
      debug:
        msg: "Allocated IP for {{ ec2.instance_ids }} is {{ eip.public_ip }}"

    - name: add public IP of new host to inventory of ansible host
      add_host:
        hostname: "{{ eip.public_ip }}"
        groupname: demogroup
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"


- hosts: demogroup
  remote_user: admin #user on the ec2 instance
  become: yes
  gather_facts: no #we need to wait for ssh
  vars_files:
    - keys.yml
  tasks:

    - name: wait for ssh to come up
      wait_for_connection:
        delay: 5
        timeout: 90

    - name: Gathering facts #now that ssh is running 
      setup:

    - name: collect instance facts
      ec2_metadata_facts:
      register: ec2_metadata_facts

    - name: Install Required Packages
      apt:
        name:
          - socat
          - conntrack
          - jq
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - ebtables
        state: latest
        update_cache: yes
        cache_valid_time: 3600

    - name: Checking for existing controller install on host
      stat:
        path: /opt/nginx-controller/files/version.txt
      register: version_file

    - name: Check which version (if any) is installed, reporting major.minor
      block:
      - name: get file contents
        command: "cat {{ version_file.stat.path }}"
        register: version

      - name: Get/set fact for installed controller version
        set_fact:
          controller_installed_version: "{{ version.stdout | regex_replace( '^version: ([0-9]).([0-9]).([0-9])$', '\\1.\\2') }}"
          cacheable: yes
      when: version_file.stat.exists

    - name: get/set fact for installed controller version
      set_fact:
        controller_installed_version: "0.0"
        cacheable: yes
      when: not version_file.stat.exists

    - name: Installing Controller
      block:
        - name: Copy this installer to the system
          become: no
          unarchive:
            src: "{{ controller.install_package }}"
            dest: "/home/{{ ansible_ssh_user }}/"
            creates: "/home/{{ ansible_ssh_user }}/controller-installer"

        - name: Execute the installer
          become: no
          command:
            chdir: "/home/{{ ansible_ssh_user }}/controller-installer"
            cmd: |
              ./install.sh -y -n --smtp-host localhost --smtp-port 25 --smtp-authentication false --smtp-use-tls false
              --noreply-address noreply@f5.com --admin-email {{ controller.admin_email }}
              --admin-password {{ controller.admin_password }}
              --fqdn {{ ec2_metadata_facts.ansible_facts.ansible_ec2_public_hostname }}
              --auto-install-docker --self-signed-cert --organization-name 'F5 - NGINX'
              --admin-firstname {{ controller.admin_firstname }}
              --admin-lastname {{ controller.admin_lastname }}
              --tsdb-volume-type local
              --configdb-volume-type local

      when: not version_file.stat.exists

    - name: Upgrading Controller
      block:
        - name: remove old install files
          file:
            path: "/home/{{ ansible_ssh_user }}/controller-installer"
            state: absent

        - name: Copy this installer to the system
          become: no
          unarchive:
            src: "{{ controller.install_package }}"
            dest: "/home/{{ ansible_ssh_user }}/"
            creates: "/home/{{ ansible_ssh_user }}/controller-installer"

        - name: Save the agent.conf
          command:
            cmd: cat /etc/controller-agent/agent.conf
          register: agent_config
          ignore_errors: true

        - name: Execute the installer
          become: no
          command:
            chdir: "/home/{{ ansible_ssh_user }}/controller-installer"
            cmd: ./update.sh -c

        - name: Restore the agent.conf
          copy:
            dest: /etc/controller-agent/agent.conf
            content: agent_config.stdout
          when: agent_config.stdout != ""

        - name: debug
          debug:
            msg: agent_config

      when:
        - controller_installed_version != '0.0'
        - controller_installed_version != controller.version

    - name: Login to the controller
      uri:
        url: https://{{ ec2_metadata_facts.ansible_facts.ansible_ec2_public_hostname }}/api/{{ controller.api_version }}/platform/login
        method: POST
        body_format: json 
        body: 
          credentials: 
            type: "BASIC"
            username: "{{ controller.admin_email }}"
            password: "{{ controller.admin_password }}"
        status_code: 204
        validate_certs: False
      register: session

    - name: Store session cookie as fact
      set_fact:
        nginx_controller_session: "{{ session }}"

    - name: Upload the controller license
      uri:
        url: https://{{ ec2_metadata_facts.ansible_facts.ansible_ec2_public_hostname }}/api/{{ controller.api_version }}/platform/license-file
        method: POST
        headers:
          Cookie: "session={{ nginx_controller_session.cookies.session }}"
        body_format: json
        body:
          content: "{{ lookup( 'file', controller.license_file ) | b64encode }}"
        status_code: 200
        validate_certs: False
