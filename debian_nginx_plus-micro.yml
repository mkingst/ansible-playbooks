- hosts: localhost
  gather_facts: no
  vars_files:
    - keys.yml
  vars:
    DEFAULT_VPC_SUBNET: subnet-3ecb9f5a 
    BASE_AMI: ami-0a24fb6cfa6ebe011 #debian10
    AWS_ZONE: eu-west-1b
    SECURITY_GROUP: sg-00cacfc118d60aec3
  tasks:
    - name: Create AWS key pair using Ansibles key
      ec2_key:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        security_token: "{{ AWS_SESSION_TOKEN }}"
        ec2_region: "{{ AWS_REGION }}"
        name: ansible_keypair
        key_material: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"

    - name: Provision instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        security_token: "{{ AWS_SESSION_TOKEN }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        instance_type: t2.micro
        group_id: "{{ SECURITY_GROUP }}"
        keypair: ansible_keypair
        image: "{{ BASE_AMI }}"
        assign_public_ip: yes
        volumes:
        - device_name: /dev/xvda
          volume_type: gp2
          volume_size: "20"
          delete_on_termination: true
        vpc_subnet_id: "{{ DEFAULT_VPC_SUBNET }}"
        wait: true
        count: 3
        instance_tags:
          Owner: m.kingston@f5.com
          Name: nginx-plus-debian
      register: ec2

    - name: add public IPs of new host to inventory of ansible host
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: micronginx
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      loop: "{{ ec2.instances }}"

- hosts: micronginx
  gather_facts: no
  become: yes
  vars_files:
    - keys.yml
  remote_user: admin #user on the ec2 instance
  tasks:
    - name: wait for ssh to come up
      wait_for_connection:
        delay: 5
        timeout: 120
  
    - name: Gathering facts
      setup:

    - name: (Debian/Ubuntu) Install dependencies
      apt:
        name: "{{ nginx_debian_dependencies }}"
        update_cache: true
        state: latest  
      when: ansible_facts['os_family'] == "Debian"

    - name: (Debian/Red Hat/SLES OSs) Set up NGINX signing key URL
      set_fact:
        keysite: "{{ nginx_signing_key | default(nginx_default_signing_key_pgp) }}"
      when: ansible_facts['os_family'] != "Alpine"

    - name: (Debian/Ubuntu) Add NGINX signing key
      apt_key:
        id: 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62
        url: "{{ keysite }}"
      when: ansible_facts['os_family'] == "Debian"

    - name: (Debian/Red Hat/SLES OSs) Set up NGINX Plus license
      block:
        - name: (Debian/Red Hat/SLES OSs) Create SSL directory
          file:
              path: /etc/ssl/nginx
              state: directory
              mode: 0755

        - name: (Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key
          copy:
              src: "{{ item }}"
              dest: /etc/ssl/nginx
              decrypt: true
              mode: 0444
          loop:
              - "{{ nginx_license['certificate'] }}"
              - "{{ nginx_license['key'] }}"
      when: ansible_facts['os_family'] != "Alpine"

    - name: (Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification
      blockinfile:
        path: /etc/apt/apt.conf.d/90nginx
        create: true
        block: |
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer "true";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host "true";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     "/etc/ssl/nginx/nginx-repo.crt";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      "/etc/ssl/nginx/nginx-repo.key";
        state: "{{ nginx_license_status | default ('present') }}"
        mode: 0444

    - name: (Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository
      apt_repository:
        filename: nginx-plus
        repo: "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}"
        update_cache: false
        state: "{{ nginx_license_status | default ('present') }}"
        mode: 0644
      when: nginx_manage_repo | bool #only do this if nginx_manage_repo is set to true

    - name: (Debian/Ubuntu) Install NGINX Plus
      apt:
        name: "nginx-plus{{ nginx_version | default('') }}"
        state: "{{ nginx_state }}"
        update_cache: true
      ignore_errors: "{{ ansible_check_mode }}"
      when: nginx_license_status is not defined
      notify: (Handler) Run NGINX

    - name: Set NGINX Plus license state to absent
      set_fact:
        nginx_license_status: absent

    - name: (Debian/Red Hat/SLES OSs) Delete NGINX Plus license
      file:
        path: /etc/ssl/nginx
        state: absent
      when: ansible_facts['distribution'] != "Alpine"

    - name: (Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus license verification
      blockinfile:
        path: /etc/apt/apt.conf.d/90nginx
        create: true
        block: |
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Peer "true";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::Verify-Host "true";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslCert     "/etc/ssl/nginx/nginx-repo.crt";
          Acquire::https::{{ (nginx_repository | default(nginx_plus_default_repository_debian)) | regex_search('(?<=https://)[^/]*') }}::SslKey      "/etc/ssl/nginx/nginx-repo.key";
        state: "{{ nginx_license_status | default ('present') }}"
        mode: 0444

    - name: (Debian/Ubuntu) {{ nginx_license_status is defined | ternary('Remove', 'Configure') }} NGINX Plus repository
      apt_repository:
        filename: nginx-plus
        repo: "{{ nginx_repository | default(nginx_plus_default_repository_debian) }}"
        update_cache: false
        state: "{{ nginx_license_status | default ('present') }}"
        mode: 0644
      when: nginx_manage_repo | bool #only do this if nginx_manage_repo is set to true

    - name: Install required controller agent packages
      apt:
        name:
          - python2.7
        state: latest
    - name: retrieve the controller agent installer from the NGINX Controller
      get_url:
        dest: /tmp/install.sh
        mode: 0750
        url: https://{{ controller.hostname }}/install/controller-agent
        validate_certs: no
    - name: Install the controller agent
      shell:
        cmd: "API_KEY='{{ controller.api_key }}' sh /tmp/install.sh -y"
        creates: /lib/systemd/system/controller-agent.service

#these will be used later to get the “instance_id” when creating the AMI
    - name: collect base ansible facts
      setup:

    - name: Collect Instance Facts 
      ec2_metadata_facts:

  handlers:
    - name: (Handler) Start/reload NGINX
      service:
        name: nginx
        state: reloaded
        enabled: true
      when:
        - nginx_start | bool
        - not ansible_check_mode | bool
      listen: (Handler) Run NGINX

    - name: (Handler) Check NGINX
      command: nginx -t
      args:
        chdir: "{{ ((ansible_facts['system'] | lower is not search('bsd')) | ternary('/etc/nginx', '/usr/local/sbin')) }}"
      register: config_check
      ignore_errors: true
      check_mode: false
      changed_when: false
      listen: (Handler) Run NGINX

    - name: (Handler) Print NGINX error if syntax check fails
      debug:
        var: config_check.stderr_lines
      failed_when: config_check.rc != 0
      when:
        - config_check.stderr_lines is defined
        - config_check.rc != 0
      listen: (Handler) Run NGINX
